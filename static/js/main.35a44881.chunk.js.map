{"version":3,"sources":["Entities/EntityTextField/index.js","Entities/EntityDateField/index.js","Entities/EntityNumberField/index.js","Entities/EntityLookUpField/index.js","Entities/index.js","App.js","serviceWorker.js","index.js"],"names":["EntityTextField","props","TextField","id","onChange","value","label","placeholder","EntityDateField","console","log","data","name","key","type","InputLabelProps","shrink","defaultValue","Date","toISOString","split","EntityNumberField","EntityLookUpField","useStyles","makeStyles","theme","root","margin","spacing","width","DynamicEntityForm","classes","style","marginBottom","color","entityMeta","initialValues","initialEntityData","onSubmit","values","actions","setTimeout","alert","JSON","stringify","setSubmitting","validate","className","noValidate","autoComplete","field","map","formfield","indx","system","dataType","component","e","setFieldValue","target","Grid","container","justify","direction","float","Button","variant","marginTop","App","Entities","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35a44881.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default function EntityTextField(props){\n    return <TextField id=\"standard-basic\" onChange={props.onChange}  value={props.value} label={props.placeholder}></TextField>\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\n\nexport default function EntityDateField(props) {\n    console.log(props.data.name);\n    return <TextField key={props.data.name} onChange={props.onChange} label={props.placeholder}\n        type=\"date\"\n        InputLabelProps={{\n            shrink: true,\n        }}\n        defaultValue={props.value && (new Date(props.value)).toISOString().split('T')[0]}\n    ></TextField>\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default function EntityNumberField(props) {\n    return <TextField id=\"standard-basic\" onChange={props.onChange} value={props.value}\n        type=\"number\"\n        label={props.placeholder}></TextField>\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default function EntityLookUpField(props) {\n    return <TextField id=\"standard-basic\"\n        type=\"search\"\n        onChange={props.onChange} value={props.value} label={props.placeholder}></TextField>\n}","import React from \"react\";\nimport entityMeta from './data/entityMeta.json';\nimport initialEntityData from './data/entityData.json';\nimport EntityTextField from './EntityTextField';\nimport EntityDateField from './EntityDateField';\nimport EntityNumberField from \"./EntityNumberField\";\nimport EntityLookUpField from \"./EntityLookUpField\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Field, Form, Formik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst DynamicEntityForm = () => {\n    const classes = useStyles();\n    return (\n        <div style={{marginBottom:\"3rem\"}}>\n            <h3 style={{ color: \"black\" }}>{entityMeta.label}</h3>\n            <Formik\n                initialValues={initialEntityData}\n                onSubmit={(values, actions) => {\n                    setTimeout(() => {\n                        alert(JSON.stringify(values, null, 2));\n                        actions.setSubmitting(false);\n                    }, 1000);\n                }}\n                validate={values => {\n                    //validate here.\n                }}\n            >\n                {(props) => (\n                    <Form className={classes.root} noValidate autoComplete=\"off\">\n                        {\n                            entityMeta.field.map(((formfield, indx) => {\n                                switch (!formfield.system && formfield.dataType) {\n                                    case \"Integer\":\n                                    case \"Decimal\":\n                                        return <Field name={formfield.name} placeholder={formfield.label} component={EntityNumberField} data={formfield}\n                                            onChange={e => props.setFieldValue(formfield.name, e.target.value)}\n                                            value={props.values[formfield.name]}\n                                        />\n                                    case \"String\":\n                                        return <Field name={formfield.name} placeholder={formfield.label} component={EntityTextField} data={formfield}\n                                            onChange={e => props.setFieldValue(formfield.name, e.target.value)}\n                                            value={props.values[formfield.name]}\n                                        />\n                                    case \"lookup\":\n                                        return <Field name={formfield.name} placeholder={formfield.label} component={EntityLookUpField} data={formfield}\n                                            onChange={e => props.setFieldValue(formfield.name, e.target.value)}\n                                            value={props.values[formfield.name]}\n                                        />\n                                    case \"Date\":\n                                        return <Field name={formfield.name} placeholder={formfield.label} component={EntityDateField} data={formfield}\n                                            onChange={e => props.setFieldValue(formfield.name, e.target.value)}\n                                            value={props.values[formfield.name]}\n                                        />\n                                    default:\n                                        return null;\n                                }\n                            }))\n                        }\n                            <Grid container justify=\"space-evenly\" direction=\"row\" style={{float:\"right\"}}>\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{marginTop:\"0.5rem\"}}>\n                                Submit</Button>\n                            </Grid>\n\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n};\n\nexport default DynamicEntityForm;","import React from 'react';\nimport './App.css';\nimport Entities from \"./Entities\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <header className=\"App-header\">\n        <div className=\"mainDiv\"> \n        <Entities></Entities>\n         </div>\n      </header> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}